"""
	Builds a HDF5 data set for test, train and validation data.
 
  HDF5 dataset is a data object within an HDF5 file that stores multidimensional arrays or tables of data.
  It provides a flexible and efficient way to organize, store, and access large and complex datasets, 
  making it widely used in machine learning and data analysis applications.
"""

import sys
import numpy as np 
import pandas as pd 
from tflearn.data_utils import build_hdf5_image_dataset
import h5py

# Check inputs
if len(sys.argv) < 2:
	raise ValueError('1 argument needed. Specify if you need to generate a train, test or val set')
else:
	mode = sys.argv[1]
	if mode not in ['train', 'test', 'val']:
		raise ValueError('Argument not recognized. Has to be train, test or val')


if __name__ == '__main__':
	
	types = {'test': 'testing', 'train': 'training', 'val': 'val'}
	hdf5_path = '../hdf5_data/'

	# generate hdf5 datasets for testing, training, and val
	for k, v in types.items():
		
		print(f'##### CREATING {v} HDF5 DATASET AND LABELS #####')
  
    # Read pickle files generated by the preprocessing script
		X = pd.read_pickle(f'../preprocessed_data/{v}_data')
		y = pd.read_pickle(f'../preprocessed_data/{v}_labels')

		# Get the file names from each respective data folders (k == train, test, or val)
		filenames = X.index.to_series().apply(lambda x: f'../data/{k}/image_'+str(x)+'.jpg')
		filenames = filenames.values.astype(str)
  
		labels = y.values.astype(int)

		# create dataframe with filename and the corresponding label
		df = np.zeros(filenames.size, dtype=[('file', 'S50'), ('label', int)])
		df['file'] = filenames
		df['label'] = labels

		# Save hdf5 labels and dataset
		labels_file = f'../hdf5_data/{k}_hdf5_labels'
		np.savetxt(f'../hdf5_data/{k}_hdf5_labels', df, fmt="%10s %d")

		dataset_file = f'../hdf5_data/{k}_dataset.h5'
		build_hdf5_image_dataset(labels_file, image_shape = (50, 50, 1), \
		mode ='file', output_path = dataset_file, categorical_labels = True, normalize = True, \
		grayscale = True)

		# Load HDF5 dataset and reshape
		h5f = h5py.File(dataset_file, 'r')
		X_images = h5f['X'][:,:,:].reshape([-1,50,50,1])
		Y_labels = h5f['Y'][:]
		h5f.close()

		# Write it to a new file (not the same one to reprocess if some error occurs)
		h5f = h5py.File(f'../hdf5_data/{k}.h5', 'w')
		h5f.create_dataset('X', data=X_images)
		h5f.create_dataset('Y', data=Y_labels)
		h5f.close()
 
		print(f'##### DONE CREATING {v} HDF5 DATASET AND LABELS #####')
